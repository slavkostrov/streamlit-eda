from pathlib import Path

import joblib
import numpy as np
import pandas as pd
import plotly.express as px
import streamlit as st

COLUMN_EMOJI = {
    "CREDIT": "üí≥",
    "GEN_TITLE": "üë©‚Äçüíº",
    "MARITAL_STATUS": "üíë",
    "AGE": "üë¥",
    "SOCSTATUS_PENS_FL": "üìú",
    "REG_ADDRESS_PROVINCE": "üè†",
    "DEPENDANTS": "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶",
    "OWN_AUTO": "üöó",
    "GEN_INDUSTRY": "üè≠",
    "EDUCATION": "üìö",
    "SOCSTATUS_WORK_FL": "üëî",
    "JOB_DIR": "üíº",
    "TARGET": "üéØ",
    "FL_PRESENCE_FL": "üè†",
    "TERM": "üìÖ",
    "AGREEMENT_RK": "üìù",
    "CHILD_TOTAL": "üë∂",
    "POSTAL_ADDRESS_PROVINCE": "‚úâÔ∏è",
    "PERSONAL_INCOME": "üí∞",
    "GENDER": "‚ößÔ∏è",
    "FST_PAYMENT": "üí≥",
    "WORK_TIME": "‚è∞",
    "ID_CLIENT": "üÜî",
    "FAMILY_INCOME": "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶",
    "FACT_ADDRESS_PROVINCE": "üè†",
    "LOAN_NUM_TOTAL": "üìù",
    "LOAN_NUM_CLOSED": "üîí",
}

COLUMNS_DESCRIPTION = """- `CREDIT` ‚Äî —Å—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö).
- `GEN_TITLE` ‚Äî –¥–æ–ª–∂–Ω–æ—Å—Ç—å.
- `MARITAL_STATUS` ‚Äî —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.
- `AGE` ‚Äî –≤–æ–∑—Ä–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞.
- `SOCSTATUS_PENS_FL` ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–µ–Ω—Å–∏–∏ (1 ‚Äî –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä, 0 ‚Äî –Ω–µ –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä).
- `REG_ADDRESS_PROVINCE` ‚Äî –æ–±–ª–∞—Å—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.
- `DEPENDANTS` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤ –∫–ª–∏–µ–Ω—Ç–∞.
- `OWN_AUTO` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
- `GEN_INDUSTRY` ‚Äî –æ—Ç—Ä–∞—Å–ª—å —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞.
- `EDUCATION` ‚Äî –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.
- `SOCSTATUS_WORK_FL` ‚Äî —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—Ç—ã (1 ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç, 0 ‚Äî –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç).
- `JOB_DIR` ‚Äî –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–∞–Ω–∏–∏.
- `TARGET` ‚Äî —Ü–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –æ—Ç–∫–ª–∏–∫ –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é (1 ‚Äî –æ—Ç–∫–ª–∏–∫ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, 0 ‚Äî –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ –±—ã–ª–æ).
- `FL_PRESENCE_FL` ‚Äî –Ω–∞–ª–∏—á–∏–µ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã (1 ‚Äî –µ—Å—Ç—å, 0 ‚Äî –Ω–µ—Ç).
- `TERM` ‚Äî —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞.
- `AGREEMENT_RK` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –≤—ã–±–æ—Ä–∫–µ.
- `CHILD_TOTAL` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –∫–ª–∏–µ–Ω—Ç–∞.
- `POSTAL_ADDRESS_PROVINCE` ‚Äî –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –æ–±–ª–∞—Å—Ç–∏.
- `PERSONAL_INCOME` ‚Äî –ª–∏—á–Ω—ã–π –¥–æ—Ö–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö).
- `GENDER` ‚Äî –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞ (1 ‚Äî –º—É–∂—á–∏–Ω–∞, 0 ‚Äî –∂–µ–Ω—â–∏–Ω–∞).
- `FST_PAYMENT` ‚Äî –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (–≤ —Ä—É–±–ª—è—Ö).
- `WORK_TIME` ‚Äî –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–µ–º –º–µ—Å—Ç–µ (–≤ –º–µ—Å—è—Ü–∞—Ö).
- `FAMILY_INCOME` ‚Äî —Å–µ–º–µ–π–Ω—ã–π –¥–æ—Ö–æ–¥ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π).
- `ID_CLIENT` ‚Äî –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞.
- `FACT_ADDRESS_PROVINCE` ‚Äî –æ–±–ª–∞—Å—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞.
- `LOAN_NUM_TOTAL` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏–∫—Ç–æ–≤.
- `LOAN_NUM_CLOSED` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤."""

COLUMN_TO_DESCRIPTION = {
    row.split()[1].strip()[1:-1]: row.split(" ‚Äî ", maxsplit=1)[-1]
    for row in COLUMNS_DESCRIPTION.split("\n")
}

BINARY_COLUMNS = [
    "SOCSTATUS_PENS_FL",
    "SOCSTATUS_WORK_FL",
    "TARGET",
    "FL_PRESENCE_FL",
    "GENDER",
]

CATEGORICAL_COLUMNS = [
    "CHILD_TOTAL",
    "GEN_TITLE",
    "POSTAL_ADDRESS_PROVINCE",
    "MARITAL_STATUS",
    "OWN_AUTO",
    "DEPENDANTS",
    "REG_ADDRESS_PROVINCE",
    "GEN_INDUSTRY",
    "EDUCATION",
    "JOB_DIR",
    "FAMILY_INCOME",
    "FACT_ADDRESS_PROVINCE",
]

ID_COLUMNS = ["AGREEMENT_RK", "WORK_TIME", "ID_CLIENT"]

DATA = data = st.cache_data(pd.read_csv)(
    Path(__name__).parent / "data" / "PREPARED_DATA.csv"
)
NUMERIC_COLUMNS = list(
    set(DATA.columns) - set(BINARY_COLUMNS) - set(CATEGORICAL_COLUMNS) - set(ID_COLUMNS)
)
MODEL = joblib.load(Path(__name__).parent / "models" / "model.pkl")


def get_list_with_desctiption(columns: list[str]) -> str:
    final_str = ""
    for column in columns:
        description = COLUMN_TO_DESCRIPTION.get(column, "")
        final_str += f"* `{column}` ‚Äî {description}\n"
    return final_str


not_id_columns = [
    column for column in data.columns if "ID" not in column and "RK" not in column
]

st.title("EDA –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞")
st.info(
    """
        üö® –≠—Ç–æ—Ç –¥–∞—à–±–æ–∞—Ä–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–≤–µ–¥–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞, –≤–∫–ª—é—á–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        –ø–æ –≤—Å–µ–º –∏–º–µ—é—â–∏–º—Å—è –∫–æ–ª–æ–Ω–∫–∞–º, –∞ —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!
"""
)

st.sidebar.title("–û –¥–∞—à–±–æ—Ä–¥–µ")
st.sidebar.info("EDA –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –±–∞–Ω–∫–∞")

tab1, tab2 = st.tabs(["EDA", "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"])

with tab1:
    if st.sidebar.checkbox("‚ö°–°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", value=True):
        st.subheader("‚ö° –°–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å—Ç—Ä–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
        st.write(
            "–ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Ç–æ –∫–∞–∫ –≤—ã–≥–ª—è–¥—è—Ç –¥–∞–Ω–Ω—ã–µ, –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–∑—å–º—ë–º —Å–ª—É—á–∞–π–Ω—ã–µ 5 —Å—Ç—Ä–æ–∫."
        )
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—ã–±–æ—Ä–∫—É"):
            st.dataframe(data.sample(5), hide_index=True)
        else:
            st.dataframe(data.sample(5), hide_index=True)

        if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫", value=False):
            st.info(COLUMNS_DESCRIPTION)

    if st.sidebar.checkbox("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫", value=True):
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫")
        st.write(
            "–¢–µ–ø–µ—Ä—å –≤—ã–≤–µ–¥–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –∏ —á–∏—Å–ª–æ–≤—ã–µ."
        )
        st.dataframe(data.describe(include="all"))
        st.write("`–í—ã–≤–æ–¥`: –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.")
        st.write("–ë–∏–Ω–∞—Ä–Ω—ã–µ:")
        st.write(get_list_with_desctiption(BINARY_COLUMNS))
        st.write("–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ:")
        st.write(get_list_with_desctiption(CATEGORICAL_COLUMNS))
        st.write("–ß–∏—Å–ª–æ–≤—ã–µ:")
        st.write(get_list_with_desctiption(NUMERIC_COLUMNS))
        st.write("–°—Ç–æ–ª–±—Ü—ã-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:")
        st.write(get_list_with_desctiption(ID_COLUMNS))

    if st.sidebar.checkbox("üíë –ü–æ–ø–∞—Ä–Ω—ã–µ scatter –≥—Ä–∞—Ñ–∏–∫–∏", value=True):
        st.write(
            "–ü–æ—Å—Ç—Ä–æ–∏–º –ø–æ–ø–∞—Ä–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —á—Ç–æ–±—ã –∏–∑—É—á–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å."
        )
        col1, col2 = st.columns(2)
        with col1:
            first_column = st.selectbox(
                "–ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü", list(DATA.columns), list(DATA.columns).index("TARGET")
            )

        with col2:
            second_column = st.selectbox(
                "–í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü",
                list(
                    set(DATA.columns)
                    - {
                        first_column,
                    }
                ),
            )
        fig = px.scatter(
            data,
            x=first_column,
            y=second_column,
            title=f"{first_column} VS {second_column}",
        )
        st.plotly_chart(fig)

    if st.sidebar.checkbox("üì∂ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫", value=True):
        st.subheader("üì∂ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
        selected_numeric_col = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã:", NUMERIC_COLUMNS
        )
        st.write(COLUMN_TO_DESCRIPTION.get(selected_numeric_col, "").capitalize())
        if st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π", value=False):
            kwargs = dict(color="TARGET")
        else:
            kwargs = dict()

        fig = px.histogram(
            data,
            x=selected_numeric_col,
            marginal="box",
            title=f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π {selected_numeric_col}.",
            **kwargs,
        )
        st.plotly_chart(fig)
        st.write(
            """`–í—ã–≤–æ–¥:` –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –≤—ã–±—Ä–æ—Å—ã, 
                 –Ω–∞–ø—Ä–∏–º–µ—Ä —ç—Ç–æ –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–æ—Ö–æ–¥ - –æ—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–∞—è –º–∞—Å—Å–∞
                 —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –¥–æ 50_000, –ø—Ä–∏ —ç—Ç–æ–º –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –±–æ–ª—å—à–∏–µ 200_000. 
                 –î–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—á–µ—Å—Ç—å –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏.
                 –í –æ—Å—Ç–∞–ª—å–Ω–æ–º - –Ω–µ–ª—å–∑—è —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–ª—å–Ω–æ
                 –º–µ–Ω—è—é—Ç—Å—è - –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä–∫–∞ –∫—Ä–∞–π–Ω–µ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.
        """
        )

    if st.sidebar.checkbox("üîó –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π", value=True):
        st.subheader("üîó –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π")
        st.info(
            """–ü–æ—Å—Ç—Ä–æ–∏–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
                 –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –ø–æ–Ω—è—Ç—å —Å–≤—è–∑—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∞ —Ç–∞–∫–∂–µ –º–µ–∂–¥—É —Å–æ–±–æ–π."""
        )
        numeric_df = data.loc[:, NUMERIC_COLUMNS + BINARY_COLUMNS].select_dtypes(
            np.number
        )
        corr = numeric_df.corr()
        colors = [
            [0.0, "blue"],
            [0.5, "white"],
            [1.0, "red"],
        ]
        fig = px.imshow(
            corr,
            color_continuous_scale=colors,
            zmin=-1,
            zmax=1,
            title="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π.",
        )
        st.plotly_chart(fig)
        st.write(
            """`–í—ã–≤–æ–¥:` –≤ —Ü–µ–ª–æ–º —Å–∏–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è, –ø—Ä–∏ —ç—Ç–æ–º 
                 –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –≤–∏–¥–Ω–∞ —É –≤–æ–∑—Ä–∞—Å—Ç–∞. –ú–µ–∂–¥—É —Å–æ–±–æ–π –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ–∂–µ –Ω–µ —Å–∏–ª—å–Ω–æ —Å–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω—ã
                 –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —è–Ω–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —á–µ–º –±–æ–ª—å—à–µ –∫—Ä–µ–¥–∏—Ç–æ–≤, —Ç–µ–º –≤ —Å—Ä–µ–¥–Ω–µ–º –±–æ–ª—å—à–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤).
        """
        )

    if st.sidebar.checkbox(
        "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö", value=True
    ):
        st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö")
        categorical_cols = CATEGORICAL_COLUMNS + BINARY_COLUMNS
        selected_categorical_col = st.selectbox(
            "Select a categorical column", categorical_cols
        )
        st.write(COLUMN_TO_DESCRIPTION.get(selected_categorical_col, "").capitalize())
        df = data[[selected_categorical_col, "TARGET"]].astype(str)
        if st.checkbox("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ", value=False):
            kwargs = dict(color="TARGET")
        else:
            kwargs = dict()
        fig = px.histogram(
            df,
            x=selected_categorical_col,
            title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ {selected_categorical_col}.",
            **kwargs,
        )
        st.plotly_chart(fig)


with tab2:
    st.write(
        """
             –ù–∞ –¥–∞–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –ª—é–±–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
             –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É `–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å`.
    """
    )
    d = {}
    current_columns = []
    for column in sorted(DATA.columns, key=lambda column: column in NUMERIC_COLUMNS):
        if column == "TARGET" or column in ID_COLUMNS:
            continue
        
        if not current_columns:
            current_columns.extend(st.columns(3))
        
        ctcol = current_columns[0]
        current_columns = current_columns[1:]
        
        with ctcol:
            if column in NUMERIC_COLUMNS:
                d[column] = st.slider(
                    label=f"{COLUMN_EMOJI.get(column, '')} {column}",
                    min_value=DATA[column].min(),
                    max_value=DATA[column].max(),
                )
            else:
                d[column] = st.selectbox(
                    f"{COLUMN_EMOJI.get(column, '')} {column}",
                    DATA[column].unique(),
                )

    if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å!"):
        data_to_predict = pd.DataFrame([d])
        predict = MODEL.predict(data_to_predict)[0]
        predict_proba = MODEL.predict_proba(data_to_predict)[0, predict]
        st.success(
            f"""
            ‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ!
            –ò—Ç–æ–≥–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π - {predict} —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {predict_proba}.
            """
        )
